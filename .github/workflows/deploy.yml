name: Deploy to Production

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  workflow_dispatch:  # Manual deployment

jobs:
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Add server to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

    - name: Deploy to server
      env:
        SERVER_IP: ${{ secrets.SERVER_IP }}
        SERVER_USER: ${{ secrets.SERVER_USER }}
      run: |
        ssh $SERVER_USER@$SERVER_IP << 'EOF'
          set -e  # Exit on error
          cd /home/openthreat/OpenThreat
          
          # Check if .env file exists
          if [ ! -f .env ]; then
            echo "‚ùå Error: .env file not found!"
            echo "Please create .env file on the server first."
            exit 1
          fi
          
          echo "üì• Pulling latest changes..."
          git pull origin main
          
          echo "üõë Stopping containers..."
          docker compose -f docker-compose.prod.yml down || true
          
          echo "üî® Building images..."
          docker compose -f docker-compose.prod.yml build --no-cache backend frontend
          
          echo "üöÄ Starting containers..."
          docker compose -f docker-compose.prod.yml up -d
          
          echo "‚è≥ Waiting for backend to be ready..."
          sleep 10
          
          echo "üîÑ Running database migrations..."
          docker compose -f docker-compose.prod.yml exec -T backend alembic upgrade head || echo "‚ö†Ô∏è Migration failed or already up to date"
          
          echo "‚úÖ Deployment completed!"
        EOF

    - name: Health check
      run: |
        echo "üè• Running health check..."
        sleep 15
        
        # Try health check with retries
        for i in {1..5}; do
          if curl -f -s http://${{ secrets.SERVER_IP }}/health > /dev/null; then
            echo "‚úÖ Health check passed!"
            exit 0
          fi
          echo "‚è≥ Attempt $i/5 failed, retrying in 10s..."
          sleep 10
        done
        
        echo "‚ùå Health check failed after 5 attempts"
        exit 1

    - name: Notify success
      if: success()
      run: echo "‚úÖ Deployment successful!"

    - name: Notify failure
      if: failure()
      run: echo "‚ùå Deployment failed!"
